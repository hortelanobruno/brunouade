/*
 * PanelGenSolFab.java
 *
 * Created on 22 de mayo de 2008, 22:38
 */

package Paneles;

import java.util.ArrayList;

import javax.swing.table.DefaultTableModel;

import GUI.Dialogo3Opciones;
import GUI.MenuPrincipal;
import VO.ArticuloAFabricarVO;
import VO.CentroDistribucionVO;
import VO.FabricaVO;
import VO.SolicitudFabricaVO;
import Vistas.VistaGenSolFab;
import controladores.ControladorPanelGenSolFab;

/**
 * 
 * @author Administrador
 */
public class PanelGenSolFab extends javax.swing.JPanel {
	private static final long serialVersionUID = -8198521566525463103L;

	private MenuPrincipal ref;

	private VistaGenSolFab vistaGenSolFab;
	private ArrayList<ArticuloAFabricarVO> articulosAFabricar;
	private boolean cargarTabla;

	/** Creates new form PanelGenSolFab */
	public PanelGenSolFab(MenuPrincipal r, VistaGenSolFab vista) {
		initComponents();
		this.ref = r;
		this.vistaGenSolFab = vista;
		cargarTabla = false;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		buttonCargarPendientes = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		tablaArticulos = new javax.swing.JTable();
		buttonEnviar = new javax.swing.JButton();

		jLabel1.setText("Solicitud de articulos a fabricar");

		buttonCargarPendientes.setText("Cargar Pendientes");
		buttonCargarPendientes
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						buttonCargarPendientesActionPerformed(evt);
					}
				});

		tablaArticulos.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Codigo", "Descripcion", "Stock Actual",
						"Stock Pedido","Stock Recibido", "Stock Minimo a Pedir",
						"Cantidad a Fabricar" }) {
			private static final long serialVersionUID = -1526134383010765513L;

			Class[] types = new Class[] { java.lang.Integer.class,
					java.lang.String.class, java.lang.Integer.class,java.lang.Integer.class,
					java.lang.Integer.class, java.lang.Integer.class,
					java.lang.Integer.class };

			boolean[] canEdit = new boolean[] { false, false, false, false,false,
					false, true };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tablaArticulos.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setViewportView(tablaArticulos);

		buttonEnviar.setText("Enviar");
		buttonEnviar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonEnviarActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				47,
																				47,
																				47)
																		.add(
																				buttonEnviar)
																		.add(
																				88,
																				88,
																				88)
																		)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				31,
																				31,
																				31)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jScrollPane1,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								657,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												jLabel1)
																										.add(
																												108,
																												108,
																												108)
																										.add(
																												buttonCargarPendientes)))))
										.addContainerGap(351, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(35, 35, 35).add(
						layout.createParallelGroup(
								org.jdesktop.layout.GroupLayout.BASELINE).add(
								jLabel1).add(buttonCargarPendientes)).add(36,
						36, 36).add(jScrollPane1,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(26,
						26, 26).add(
						layout.createParallelGroup(
								org.jdesktop.layout.GroupLayout.BASELINE).add(
								buttonEnviar))
						.addContainerGap(82, Short.MAX_VALUE)));
	}// </editor-fold>

	private void buttonCargarPendientesActionPerformed(java.awt.event.ActionEvent evt) {
		// Cargar articulos pendientes
		((ControladorPanelGenSolFab) vistaGenSolFab.getControlador())
				.doCargarArticulosPendientes(true);
	}

	private void buttonEnviarActionPerformed(java.awt.event.ActionEvent evt) {
		// Generar SolFab
		((ControladorPanelGenSolFab) vistaGenSolFab.getControlador())
		.doCargarArticulosPendientes(false);
	}
	
	
	public void update() {
		
		if(cargarTabla){
			ArrayList<ArticuloAFabricarVO> arts = this.ref.getVistaGenSolFab().getModelo().getArticulosAFabricarVO();
			this.setArticulosAFabricar(arts);
			cargarTabla(arts);
			ref.getJTextArea1().append("Articulos Cargados\n");
		}else{
			ArrayList<ArticuloAFabricarVO> arts = leerArticulosDeTabla();
			SolicitudFabricaVO solFab = new SolicitudFabricaVO();
			solFab.setArticulosAFabricar(arts);
			CentroDistribucionVO centroVO = this.ref.getVistaGenSolFab().getModelo().getCentro();
			solFab.setCdVO(centroVO);
			//aca hay que arreglar que la fabrica se setee de una combo o algo asi
			FabricaVO fabVO = this.ref.getVistaGenSolFab().getModelo().getFabrica();
			solFab.setFabrica(fabVO);
			//aca hay que arreglar la fecha...
			solFab.setFechaEmision(ref.getDate());
			int idSolFab = this.ref.getVistaGenSolFab().getModelo().getNumeroSolFab();
			idSolFab++;
			solFab.setNumero(idSolFab);
			this.ref.getVistaGenSolFab().getModelo().actualizarSolicitudFabricacion(solFab);
			vaciarTabla();
			ref.getJTextArea1().append("Solicitud de Fabricacion Guardada\n");
			new Dialogo3Opciones("Operacion concretada", this).setVisible(true);
		}
	}
	
	public ArrayList<ArticuloAFabricarVO> leerArticulosDeTabla(){
		ArrayList<ArticuloAFabricarVO> arts = new ArrayList<ArticuloAFabricarVO>();
		for (int i = 0 ; i < articulosAFabricar.size() ; i++){
			ArticuloAFabricarVO artVO = articulosAFabricar.get(i);
			int cantAFabricar = Integer.parseInt(((DefaultTableModel)tablaArticulos.getModel()).getValueAt(i, 6).toString());
			artVO.setCantidadAFabricar(cantAFabricar);
			arts.add(artVO);
		}
		return arts;
	}
	 /*"Codigo", "Descripcion", "Stock Actual",
		"Stock Pedido","Stock Recibido", "Stock Minimo a Pedir",
		"Cantidad a Fabricar"*/
	public void cargarTabla(ArrayList<ArticuloAFabricarVO> arts){
		for (int i = 0 ; i < arts.size() ; i++ ){
			ArticuloAFabricarVO artVO = arts.get(i);
			long codigo = artVO.getArt().getCodigo();
			String descripcion = artVO.getArt().getDescripcion();
			int stockActual = artVO.getArt().getCantidad();
			int stockPedido = artVO.getCantidadPedida();
			int stockRecibido = artVO.getCantidadRecibida();
			int stockMinimoAPedir = (stockPedido - stockRecibido) * 2;
			int cantAFabricar = 0;
			((DefaultTableModel) tablaArticulos.getModel())
			.addRow(new Object[] { codigo, descripcion, stockActual,stockPedido,stockRecibido,stockMinimoAPedir,cantAFabricar});
		}
	}

	public void vaciarTabla() {
		((DefaultTableModel)tablaArticulos.getModel()).getDataVector().removeAllElements();
	}

	// Variables declaration - do not modify
	private javax.swing.JButton buttonCargarPendientes;

	private javax.swing.JButton buttonEnviar;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JScrollPane jScrollPane1;

	private javax.swing.JTable tablaArticulos;

	// End of variables declaration

	public MenuPrincipal getRef() {
		return ref;
	}

	public void setRef(MenuPrincipal ref) {
		this.ref = ref;
	}

	public VistaGenSolFab getVistaGenSolFab() {
		return vistaGenSolFab;
	}

	public void setVistaGenSolFab(VistaGenSolFab vistaGenSolFab) {
		this.vistaGenSolFab = vistaGenSolFab;
	}

	public boolean isCargarTabla() {
		return cargarTabla;
	}

	public void setCargarTabla(boolean cargarTabla) {
		this.cargarTabla = cargarTabla;
	}

	public ArrayList<ArticuloAFabricarVO> getArticulosAFabricar() {
		return articulosAFabricar;
	}

	public void setArticulosAFabricar(
			ArrayList<ArticuloAFabricarVO> articulosAFabricar) {
		this.articulosAFabricar = articulosAFabricar;
	}

}
