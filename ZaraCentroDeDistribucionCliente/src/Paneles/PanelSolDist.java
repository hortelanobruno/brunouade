/*
 * PanelSolDist.java
 *
 * Created on 22 de mayo de 2008, 22:58
 */

package Paneles;

import java.awt.Color;
import java.util.Iterator;
import java.util.Vector;
import GUI.Dialogo3Opciones;
import GUI.FileChooser;
import GUI.MenuPrincipal;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import controladores.ControladorPanelSolDis;
import VO.ArticuloHeaderVO;
import VO.SolicitudDistribucionVO;
import VO.SolicitudEnvioVO;
import VO.SolicitudFabricaVO;
import Varios.Constantes;
import Varios.XMLWrapper;
import Vistas.VistaSolDis;

/**
 * 
 * @author Administrador
 */
public class PanelSolDist extends javax.swing.JPanel {

	private static final long serialVersionUID = 1L;
	private String urlXML;
	private boolean cargarTable;
	private MenuPrincipal ref;
	private SolicitudDistribucionVO solDisVO;
	private VistaSolDis vistaSolDis;
	
	/** Creates new form PanelSolDist */
	public PanelSolDist(MenuPrincipal mn, VistaSolDis vista) {
		initComponents();
		this.ref = mn;
		this.vistaSolDis = vista;
		tableArticulos.getModel().addTableModelListener(
				new TableModelListener() {
					public void tableChanged(TableModelEvent e) {
						if (e.getColumn() > -1)
							validateTable();
					}
				});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		buttonCargarXML = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		tableArticulos = new javax.swing.JTable();
		buttonGuardarPedido = new javax.swing.JButton();
		labelValidacion = new javax.swing.JLabel();

		jLabel1.setText("Solicitud de distribucion");

		buttonCargarXML.setText("Cargar XML");
		buttonCargarXML.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonCargarXMLActionPerformed(evt);
			}
		});

		tableArticulos.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Nombre Solicitud", "Tienda", "Codigo Art.",
						"Descripcion", "Cantidad Pedida", "Stock Actual",
						"Cantidad a Enviar" }) {
			private static final long serialVersionUID = 1L;

			Class[] types = new Class[] { java.lang.String.class,
					java.lang.String.class, java.lang.Long.class,
					java.lang.String.class, java.lang.Integer.class,
					java.lang.Integer.class, java.lang.Integer.class };

			boolean[] canEdit = new boolean[] { false, false, false, false,
					false, false, true };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tableArticulos.setEnabled(false);
		tableArticulos.setRowSelectionAllowed(false);
		tableArticulos
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		tableArticulos.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setViewportView(tableArticulos);

		buttonGuardarPedido.setText("Guardar Pedido");
		buttonGuardarPedido
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						buttonGuardarPedidoActionPerformed(evt);
					}
				});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				766,
																				766,
																				766)
																		.add(
																				labelValidacion,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				23,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				32,
																				32,
																				32)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jScrollPane1,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								705,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												jLabel1)
																										.add(
																												96,
																												96,
																												96)
																										.add(
																												buttonCargarXML))
																						.add(
																								buttonGuardarPedido))))
										.addContainerGap(251, Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				28,
																				28,
																				28)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								jLabel1)
																						.add(
																								buttonCargarXML))
																		.add(
																				29,
																				29,
																				29)
																		.add(
																				jScrollPane1,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				204,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				155,
																				155,
																				155)
																		.add(
																				labelValidacion,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				21,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED,
												72, Short.MAX_VALUE).add(
												buttonGuardarPedido).add(70,
												70, 70)));
	}// </editor-fold>

	private void buttonGuardarPedidoActionPerformed(java.awt.event.ActionEvent evt) {
		((ControladorPanelSolDis) vistaSolDis.getControlador()).doCargarXML(false);
	}

	private void buttonCargarXMLActionPerformed(java.awt.event.ActionEvent evt) {
		// Carga archivo XML
		chooser = new FileChooser(ref, true, ref.getDefaltXmlPath());
		urlXML = chooser.getPath();
		if (urlXML.equals(""))
			JOptionPane.showMessageDialog(this,
					"Debe ingresar la ubicacion del archivo XML.\n",
					Constantes.APPLICATION_NAME, JOptionPane.ERROR_MESSAGE);
		else {
			// Cargar los table
			((ControladorPanelSolDis) vistaSolDis.getControlador()).doCargarXML(true);
		}
	}
	
	
	private void cargarTable(SolicitudDistribucionVO solDisVO,Vector<Long> codigos, Vector<String> descripciones,Vector<Integer> stocks) {
		Iterator iterador = (Iterator) solDisVO.getArticulo().iterator();
		for (int i = 0; i < solDisVO.getArticulo().size(); i++) {
			((DefaultTableModel) tableArticulos.getModel())
					.addRow(new Object[] {
							"Solicitud Numero " + solDisVO.getNumero(),
							solDisVO.getTienda().getNombreTienda(),
							codigos.elementAt(i).toString(),
							descripciones.elementAt(i).toString(),
							((ArticuloHeaderVO) iterador.next()).getCantidad(),
							stocks.elementAt(i).toString(), 0 });
		}
	}

	private void validateTable() {
		boolean grabar = true;
		int cantCeros = 0;

		for (int i = 0; i < tableArticulos.getModel().getRowCount(); i++) {
			int valor = Integer.parseInt(tableArticulos.getModel().getValueAt(
					i, 5).toString());
			int pedido = Integer.parseInt(tableArticulos.getModel().getValueAt(
					i, 3).toString());

			if (valor == 0)
				cantCeros++;
			if ((valor < 0) || (valor > pedido)) {
				grabar = false;
				if (valor > pedido)
					JOptionPane.showMessageDialog(this,
							"El valor ingresado es mayor al pedido.",
							Constantes.APPLICATION_NAME,
							JOptionPane.ERROR_MESSAGE);
				break;
			}
		}

		if ((grabar) && (cantCeros < tableArticulos.getModel().getRowCount())) {
			buttonGuardarPedido.setEnabled(true);
			labelValidacion.setText("OK");
			labelValidacion.setForeground(Color.GREEN);
		} else {
			buttonGuardarPedido.setEnabled(false);
			labelValidacion.setForeground(Color.RED);
			if (!grabar)
				labelValidacion
						.setText("Hay errores en los valores ingresados");
			else
				labelValidacion.setText("Debe ingresar valores.");
		}
	}

	public void update() {
		//aca hay que poner las llamadas a la business delegate
		if(cargarTable){
			XMLWrapper xml = new XMLWrapper();
			solDisVO = (SolicitudDistribucionVO) xml.parseXMLSD(urlXML);
			Vector<Long> codigos = new Vector<Long>();
			Iterator arts = (Iterator) solDisVO.getArticulo().iterator();
			while (arts.hasNext()) {
				codigos.add(((ArticuloHeaderVO) arts.next()).getCodigo());
			}
			Vector<String> descripciones = this.ref.getVistaSolDis().getModelo().getDescripciones(codigos);
			Vector<Integer> stocks = this.ref.getVistaSolDis().getModelo().getStocks(codigos);
			cargarTable(solDisVO, codigos, descripciones, stocks);
			ref.getJTextArea1().append("Archivo Cargado\n");
		}else{
			//Falta generar las solicitudes
			SolicitudEnvioVO solEnvio = (SolicitudEnvioVO) generarSolEnvios();
			SolicitudFabricaVO solFab = (SolicitudFabricaVO) generarSolFab();
			
			((ControladorPanelSolDis)vistaSolDis.getControlador()).doGuardarSolicitud(solDisVO);
			((ControladorPanelSolDis)vistaSolDis.getControlador()).doGuardarSolicitudEnvios(solEnvio);
			((ControladorPanelSolDis)vistaSolDis.getControlador()).doGuardarSolicitudFabricacion(solFab);
			vaciarTabla();
			ref.getJTextArea1().append("Solicitudes Guardadas\n");
			new Dialogo3Opciones("Operacion concretada", this.ref).setVisible(true);
		}
	}

	public SolicitudEnvioVO generarSolEnvios(){
		SolicitudEnvioVO sol = new SolicitudEnvioVO();
		//aca falta generar la solicitud
		return sol;
	}
	
	public SolicitudFabricaVO generarSolFab(){
		SolicitudFabricaVO sol = new SolicitudFabricaVO();
		//aca falta generar la solicitud
		return sol;
	}
	
	public void vaciarTabla(){
		for(int i=0 ; i<tableArticulos.getRowCount() ; i++){
			((DefaultTableModel)tableArticulos.getModel()).removeRow(i);
		}
	}
	
	// Variables declaration - do not modify
	private javax.swing.JButton buttonCargarXML;

	private javax.swing.JButton buttonGuardarPedido;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JScrollPane jScrollPane1;

	private javax.swing.JLabel labelValidacion;

	private javax.swing.JTable tableArticulos;

	private FileChooser chooser;
	// End of variables declaration

	public boolean getCargarTable() {
		return cargarTable;
	}

	public void setCargarTable(boolean cargarTable) {
		this.cargarTable = cargarTable;
	}

}
