/*
 * PanelEnvios.java
 *
 * Created on 22 de mayo de 2008, 22:26
 */

package Paneles;

import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreePath;

import BusinessLogic.BusinessDelegate;
import GUI.MenuPrincipal;
import VO.ArticuloAEnviarVO;
import VO.ArticuloReservadoVO;
import VO.SolicitudDistribucionVO;
import VO.SolicitudEnvioVO;
import VO.TiendaVO;
import Vistas.VistaEnvios;
import controladores.ControladorPanelEnvios;

/**
 * 
 * @author Administrador
 */
public class PanelEnvios extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private MenuPrincipal ref;
	public boolean cargarTable;
	public boolean cargarTree;
	private VistaEnvios vistaEnvios;
	private SolicitudDistribucionVO solDis;
	private ArrayList<ArticuloReservadoVO> articulosReservados;
	private ArrayList<SolicitudDistribucionVO> solicitudes;
	
	
	/** Creates new form PanelEnvios */
	public PanelEnvios(MenuPrincipal menu, VistaEnvios vista) {
		initComponents();
		this.ref = menu;
		this.vistaEnvios = vista;
		initCombo();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	
	
	private void initCombo(){
		ArrayList<TiendaVO> tiendas = ((BusinessDelegate) vistaEnvios.getModelo()).obtenerTiendas();
		for (int i = 0 ; i< tiendas.size() ; i++){
			TiendaVO tienda = tiendas.get(i);
			((DefaultComboBoxModel)comboBoxTiendas.getModel()).addElement(tienda.getNombreTienda());
		}	
	}
	
	
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		comboBoxTiendas = new javax.swing.JComboBox();
		jScrollPane1 = new javax.swing.JScrollPane();
		treeArticulos = new javax.swing.JTree();
		buttonCargar = new javax.swing.JButton();
		jScrollPane3 = new javax.swing.JScrollPane();
		tablePendientes = new javax.swing.JTable();
		jLabel2 = new javax.swing.JLabel();
		buttonEnviarTienda = new javax.swing.JButton();

		jLabel1.setText("Tienda");

		comboBoxTiendas.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] {}));
		comboBoxTiendas.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				comboBoxTiendasActionPerformed(evt);
			}
		});

		jScrollPane1.setViewportView(treeArticulos);

		buttonCargar.setText("Cargar");
		buttonCargar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonCargarActionPerformed(evt);
			}
		});

		tablePendientes.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Codigo Art.", "Descripcion", "Cantidad",
						"Stock" }) {
							private static final long serialVersionUID = 1L;
			Class[] types = new Class[] { java.lang.Integer.class,
					java.lang.String.class, java.lang.Integer.class,
					java.lang.Integer.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		jScrollPane3.setViewportView(tablePendientes);

		jLabel2.setText("Articulos Pendientes");

		buttonEnviarTienda.setText("Enviar Tienda");
		buttonEnviarTienda
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						buttonEnviarTiendaActionPerformed(evt);
					}
				});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jScrollPane1,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								149,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												jLabel1)
																										.add(
																												30,
																												30,
																												30)
																										.add(
																												comboBoxTiendas,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												170,
																												170,
																												170)
																										.add(
																												jScrollPane3,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												335,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												280,
																												280,
																												280)
																										.add(
																												jLabel2))))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				49,
																				49,
																				49)
																		.add(
																				buttonCargar)
																		.add(
																				323,
																				323,
																				323)
																		.add(
																				buttonEnviarTienda)))
										.addContainerGap(376, Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(67, 67, 67)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								jLabel1)
																						.add(
																								comboBoxTiendas,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								jLabel2))
																		.add(
																				44,
																				44,
																				44)
																		.add(
																				jScrollPane1,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				147,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.add(
																				51,
																				51,
																				51))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				jScrollPane3,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				181,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.add(
																				18,
																				18,
																				18)))
										.add(15, 15, 15)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(buttonCargar)
														.add(buttonEnviarTienda))
										.addContainerGap(83, Short.MAX_VALUE)));
	}// </editor-fold>

	private void buttonCargarActionPerformed(java.awt.event.ActionEvent evt) {
		// Cargar solicitud en tablas
		((ControladorPanelEnvios) vistaEnvios.getControlador()).doCargarSolicitud(true,false);
	}

	private void comboBoxTiendasActionPerformed(java.awt.event.ActionEvent evt) {
		// Se selecciono una tienda y cargo las solicitudes en el tree
		((ControladorPanelEnvios) vistaEnvios.getControlador()).doTiendaSeleccionada(true);
	}

	private void buttonEnviarTiendaActionPerformed(
			java.awt.event.ActionEvent evt) {
			((ControladorPanelEnvios) vistaEnvios.getControlador()).doCargarSolicitud(false,false);
	}

	public void cargarArbol(ArrayList<SolicitudDistribucionVO> solicitudes){
		DefaultMutableTreeNode abuelo = new DefaultMutableTreeNode("Solicitudes");
		DefaultTreeModel modelo = new DefaultTreeModel(abuelo);
		treeArticulos = new JTree(modelo);
		DefaultMutableTreeNode[] padre = new DefaultMutableTreeNode[solicitudes.size()];
		Iterator it = solicitudes.iterator();
		int i = 0;
		while(it.hasNext()){
			SolicitudDistribucionVO sol = (SolicitudDistribucionVO) it.next();
			padre[i] = new DefaultMutableTreeNode(sol.getNumero());
			i++;
		}
		for(int j = 0 ; j < padre.length ; j++){
			modelo.insertNodeInto(padre[j],abuelo, j);
		}
		jScrollPane1.setViewportView(treeArticulos);
	}
	
	
	public void update() {
		if(cargarTree){
			String tienda = comboBoxTiendas.getSelectedItem().toString();
			solicitudes = ((BusinessDelegate) vistaEnvios.getModelo()).obtenerSolicitudesDeTienda(tienda);
			cargarArbol(solicitudes);
			//falta hacer el metodo en el servidor
		}else{
			if(cargarTable){
				TreePath path = ((DefaultTreeSelectionModel)treeArticulos.getModel()).getSelectionPath();
				Object [] nodos = path.getPath();
				System.out.print("Path seleccionado: ");
				for (Object nodo: nodos)
					System.out.print (nodo.toString() + " | ");
				System.out.println("");
				//corrobarar que funque lo de los nodos
				DefaultMutableTreeNode nodo = (DefaultMutableTreeNode)nodos[nodos.length-1];
				int codSolDis = Integer.parseInt(""+nodo.getUserObject());
				for (int i = 0 ; i < solicitudes.size() ; i++){
					solDis = solicitudes.get(i);
					if(solDis.getNumero() == codSolDis){
						break;
					}
				}
				articulosReservados = ((BusinessDelegate) vistaEnvios.getModelo()).obtenerArticulosReservados(codSolDis);
				ArrayList<Long> codigos = new ArrayList<Long>();
				for(int j = 0 ; j < articulosReservados.size() ; j++){
					ArticuloReservadoVO artRes = articulosReservados.get(j);
					codigos.add(artRes.getArt().getCodigo());
				}
				//falta codificar el metodo en el servidor
				ArrayList<Integer> stocks = ((BusinessDelegate) vistaEnvios.getModelo()).getStocks(codigos);
				cargarTable(solDis,articulosReservados,stocks);
			}else{
				//se genera la solicitud de envio con los datos de la table
				SolicitudEnvioVO solEnvio = new SolicitudEnvioVO();
				ArrayList<ArticuloAEnviarVO> articulosAEnviar = articulosAEnviarDeTabla();
				((BusinessDelegate) vistaEnvios.getModelo()).guardarSolicitudDeEnvio(solEnvio);
				((BusinessDelegate) vistaEnvios.getModelo()).actualizarStock(articulosAEnviar,articulosReservados);
				((BusinessDelegate) vistaEnvios.getModelo()).actualizarArticulosReservados(articulosReservados);
				((BusinessDelegate) vistaEnvios.getModelo()).actualizarSolicitudDistribucion(solDis);
				//hay que codificar los 4 metodos en el servidor
				//generar xml
			}
		}
	}

	
	
	private ArrayList<ArticuloAEnviarVO> articulosAEnviarDeTabla() {
		ArrayList<ArticuloAEnviarVO> articulosAEnviar = new ArrayList<ArticuloAEnviarVO>();
		
		return articulosAEnviar;
	}

	private void cargarTable(SolicitudDistribucionVO solDis2, ArrayList<ArticuloReservadoVO> articulosReservados2, ArrayList<Integer> stocks) {
		
	}

	// Variables declaration - do not modify
	private javax.swing.JButton buttonCargar;

	private javax.swing.JButton buttonEnviarTienda;

	private javax.swing.JComboBox comboBoxTiendas;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JLabel jLabel2;

	private javax.swing.JScrollPane jScrollPane1;

	private javax.swing.JScrollPane jScrollPane3;

	private javax.swing.JTable tablePendientes;

	private javax.swing.JTree treeArticulos;

	// End of variables declaration

	public VistaEnvios getVistaEnvios() {
		return vistaEnvios;
	}

	public void setVistaEnvios(VistaEnvios vistaEnvios) {
		this.vistaEnvios = vistaEnvios;
	}

	public MenuPrincipal getRef() {
		return ref;
	}

	public void setRef(MenuPrincipal ref) {
		this.ref = ref;
	}

	public void setCargarTable(boolean b) {
		this.cargarTable = b;
	}
	
	public boolean getCargarTable(){
		return this.cargarTable;
	}

	public void setCargarTree(boolean b) {
		this.cargarTree = b;
	}
	
	public boolean getCargarTree(){
		return this.cargarTree;
	}

}
